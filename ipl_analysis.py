# -*- coding: utf-8 -*-
"""IPL Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/105xMil94fVq7j3jRoWhUIZtGrr9gO3pZ
"""

import pandas as pd
import numpy as np 
import seaborn as sns
from matplotlib import pyplot as plt

from google.colab import files
uploaded = files.upload()

ipl=pd.read_csv("ipl data.csv")

#having a glance at the first five records of the dataset
ipl.head()

#Lookin at the number of rows and columns in the dataset
ipl.shape

#Displaying information about data
ipl.info()

#describing the data
ipl.describe()

#Displaying the frequency of most man of the match awards
ipl["player_of_match"].value_counts()

#Displaying the top 10 players with most man of the match awards
ipl["player_of_match"].value_counts()[0:10]

list(ipl["player_of_match"].value_counts()[0:10].keys())

#making a bar-plot for the top 5 players with most man of the match awards
plt.figure(figsize=(8,5))
plt.bar(list(ipl["player_of_match"].value_counts()[0:5].keys()),list(ipl["player_of_match"].value_counts()[0:5]),color="g")
plt.show()

#Displaying the frequency of result column
ipl["result"].value_counts()

#Finding out the number of toss wins w.r.t each team
ipl["toss_winner"].value_counts()

#Getting the records where a team won batting first
batting_first=ipl[ipl["win_by_runs"]!=0]

#Looking at the head
batting_first.head()

#Making a histogram 
plt.figure(figsize=(5,5))
plt.hist(batting_first["win_by_runs"])
plt.title("Distribution of Runs")
plt.xlabel("Runs")
plt.show()

#Finding out the number of wins w.r.t each team after batting first
batting_first["winner"].value_counts()

#Making a bar-plot for top 3 teams with most wins after batting first
plt.figure(figsize=(6,6))
plt.bar(list(batting_first["winner"].value_counts()[0:3].keys()),list(batting_first["winner"].value_counts()[0:3]),color=["blue","yellow","red"])
plt.show()

#Making a pie chart
plt.figure(figsize=(7,7))
plt.pie(list(batting_first['winner'].value_counts()),labels=list(batting_first['winner'].value_counts().keys()),autopct='%0.1f%%')
plt.show()

#Getting all the records where a team has won after batting second
batting_second=ipl[ipl["win_by_wickets"]!=0]

#looking at the head
batting_second.head()

#Making a histogram for frequency of wins w.r.t number of wicket
plt.figure(figsize=(7,7))
plt.hist(batting_second["win_by_wickets"],bins=30)
plt.show()

#Finding out the frequency of number of wins w.r.t each time after batting second
batting_second["winner"].value_counts()

#Making a bar plot for top-3 teams with most wins after batting second
plt.figure(figsize=(7,7))
plt.bar(list(batting_second['winner'].value_counts()[0:3].keys()),list(batting_second['winner'].value_counts()[0:3]),color=["purple","blue","yellow"])
plt.show()

#Making a pie chart for distribution of most wins after batting second
plt.figure(figsize=(7,7))
plt.pie(list(batting_second['winner'].value_counts()),labels=list(batting_second['winner'].value_counts().keys()),autopct='%0.1f%%')
plt.show()

#Looking at the number of matches played each season
ipl["season"].value_counts()

#Looking at the number of matches played in each city
ipl["city"].value_counts()

#Finding out how many times a team has won the match after winning the toss
np.sum(ipl['toss_winner']==ipl['winner'])